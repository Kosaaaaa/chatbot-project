[project]
name = "chatbot-project"
version = "0.1.0"
description = ""
authors = [
  { name = "Kosaaaaa" }
]
license = { text = "MIT" }
readme = "README.md"
requires-python = ">=3.13,<4.0"
dependencies = [
  "fastapi (>=0.115.12,<0.116.0)",
  "pydantic (>=2.11.4,<3.0.0)",
  "loguru (>=0.7.3,<0.8.0)",
  "pydantic-settings (>=2.9.1,<3.0.0)",
  "uvicorn (>=0.34.2,<0.35.0)",
  "httpx (>=0.28.1,<0.29.0)",
  "sqlmodel (>=0.0.24,<0.0.25)",
  "alembic (>=1.15.2,<2.0.0)",
  "asyncpg (>=0.30.0,<0.31.0)",
  "pydantic-ai (>=0.2.4,<0.3.0)",
]
package-mode = false
packages = [{ include = "app" }]


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.5"
pytest-asyncio = "^0.26.0"
pytest-mock = "^3.14.0"
pytest-cov = "^6.1.1"
polyfactory = "^2.21.0"


[tool.ruff]
line-length = 120
target-version = "py313"

exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  ".idea",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "site-packages",
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint]
preview = true

select = [
  "F", # Pyflakes
  "E", # pycodestyle errors
  "W", # pycodestyle warnings
  "C90", # mccabe complexity
  "I", # isort
  "N", # pep8-naming
  "UP", # pyupgrade
  "S", # flake8-bandit
  "FBT", # flake8-boolean-trap
  "B", # flake8-bugbear
  "A", # flake8-builtins
  "C4", # flake8-comprehensions
  "T10", # flake8-debugger
  "ISC", # flake8-implicit-str-concat
  "PIE", # flake8-pie
  "PT", # flake8-pytest-style
  "SIM", # flake8-simplify
  "PTH", # flake8-use-pathlib
  "PL", # Pylint
  "FURB", # refurb
  "FAST", # FastAPI
  "PERF", # Perflint
  "DTZ", # Datetimez
]

# https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
ignore = [
  "COM812", # missing-trailing-comma
  "COM819", # prohibited-trailing-comma
  "D206", # indent-with-spaces
  "D300", # triple-single-quotes
  "E111", # indentation-with-invalid-multiple
  "E114", # indentation-with-invalid-multiple-comment
  "E117", # over-indented
  "E501", # line-too-long
  "E731", # Do not assign a `lambda` expression, use a `def`
  "ISC001", # single-line-implicit-string-concatenation
  "ISC002", # multi-line-implicit-string-concatenation
  "Q000", # bad-quotes-inline-string
  "Q001", # bad-quotes-multiline-string
  "Q002", # bad-quotes-docstring
  "Q003", # avoidable-escaped-quote
  "S101", # Use of `assert` detected
  "W191", # tab-indentation
  "B008", # Do not perform function calls in argument defaults
  "ANN401", # Dynamically typed expressions (`Any`) are not allowed
  "A005", # Module X is shadowing a Python builtin module
]

[tool.ruff.lint.per-file-ignores]
"**/tests/**" = [
  "S",
  "PLR0913",
  "PLR0917", # Allow too many arguments because of pytest fixtures
  "PLR6301", # Disable information that method could be a function, class method or static method
  "PLR2004", # Magic values are allowed in tests
  "FBT001", # Allow bool in positional arguments because of pytest fixtures
]


[tool.ruff.lint.isort]
combine-as-imports = true

[tool.basedpyright]
typeCheckingMode = "all"

# Pre-commit will install pyright-python in its own virtual environment
# which can cause pyright to not be able to detect your installed dependencies.
# To fix this, you can set the venvPath to the root of your project.
venvPath = "."
venv = ".venv"
pythonVersion = "3.13"

exclude = ["migrations"]

reportAny = false
reportExplicitAny = false
reportUnknownMemberType = false
reportMissingTypeStubs = false

[tool.pytest.ini_options]
asyncio_mode = "auto"
